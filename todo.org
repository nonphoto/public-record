* presentation
** what's the problem?
*** we want to create a real-time collaborative document editor
*** let's model this as just inserts and deletes in plain text
*** requirements: (fiddle w/ this)
**** collaboration in real time
***** this means we can't just use locks, for example
**** smooth user experience: local changes are applied immediately
***** i.e., apply changes optimistically, resolve conflicts later
**** client's documents should eventually converge
** enter OT
*** example
**** David and Jonas both have documents with the text "go"
**** say David enters 'a', Jonas enters 't' at the same time
**** ...
**** overall, this should be oriented around the diamond diagram
         go
      a /  \ t
     goa    got
**** if we decide that 'a' should occur before 't' (somehow smooth this), 
then give the example solution here
*** now generalize
**** we've seen example of OT framework
**** suppose a and b are examples of operations on document
**** need to find a' and b' to complete the diamond
**** this gives the spec for transform: xform(a,b) -> (a',b') s.t. ...
** our project
*** specs/priorities:
**** web interface
**** insert, delete
*** things to talk about:
**** parsing operations, taking diffs, etc.
**** connecting clients to server, need to set up live websocket connection
**** operation structure, composing operations, etc
***** perhaps motivate by having multiple 
** testing
* architecture
** server
*** web server
*** stores linear history
*** initial thoughts
**** it keeps list clients
**** each client has position in revision history
***** is this history linear? yes
**** iterate over clients and send new operations
** client
*** parsing
**** basic parsing done
**** need to modify to send as Operation
**** cursor position?
*** output
**** received text
**** received cursor positions
**** transform operations
*** keep track of server
** Operation
*** JSON object
*** send via socket.io
*** data
**** clientID
**** cursorChange
**** characters
**** insertOrDelete?
**** position (at which characters are inserted or deleted)
* today
** set up server-client communication
** features:
*** empty Operation objects
*** use socket.io
**** uses node.js server
**** opens and closes sockets on server
**** actually, what does it offer beyond node.js?
*** queue of recent Operations
*** two types threads
**** greeter callback function
***** upon receipt of new client Operation, push onto queue
**** main function
loop:
  pull Operation off queue
  broadcast to clients

**** broadcaster thread
***** one per client
***** stores client's current queue position
***** loop { send next Operation }
***** ignore memory considerations for now
*** store document
** pseudocode
*** server
**** greeter thread
- initialize 
