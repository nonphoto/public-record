* architecture
** server
*** web server
*** stores linear history
*** initial thoughts
**** it keeps list clients
**** each client has position in revision history
***** is this history linear? yes
**** iterate over clients and send new operations
** client
*** parsing
**** basic parsing done
**** need to modify to send as Operation
**** cursor position?
*** output
**** received text
**** received cursor positions
**** transform operations
*** keep track of server
** Operation
*** JSON object
*** send via socket.io
*** data
**** clientID
**** cursorChange
**** characters
**** insertOrDelete?
**** position (at which characters are inserted or deleted)
* today
** set up server-client communication
** features:
*** empty Operation objects
*** use socket.io
**** uses node.js server
**** opens and closes sockets on server
**** actually, what does it offer beyond node.js?
*** queue of recent Operations
*** two types threads
**** greeter callback function
***** upon receipt of new client Operation, push onto queue
**** main function
loop:
  pull Operation off queue
  broadcast to clients

**** broadcaster thread
***** one per client
***** stores client's current queue position
***** loop { send next Operation }
***** ignore memory considerations for now
*** store document
** pseudocode
*** server
**** greeter thread
- initialize 
* for submission
** implementation
*** testing
**** scaling to many users
***** write bot that randomly inserts or deletes characters
***** evaluate throughput (operations/s) as we increase # of concurrenct bots
** writing
*** intro
**** say what Public Record is
*** background
**** requirements of real-time collaborative editors
***** truly real-time collaboration
i.e., no checking-in-checking-out of versions + real-time
updates of other users' changers
***** smooth user experience:
every change should be applied to local copy immediately
***** convergence
local copies should eventually converge
***** ==> need some kind of optimistic concurrency control
**** operational transformation
***** a general framework for applying optimistic concurrency control
across various domains
***** ...
*** architectural overview
**** client-server structure
***** clients connect to central server host
***** server
****** receive operations from clients
****** update master state
****** broadcast operations back out to all clients
******* operations have a field for original client author
******* operation sent back to original client serves as ack
***** client
****** send each operation to server
****** upon receiving an operation from the server:
******* if client is author: ignore
******* if client is not author:
******** if client has recent operations that have not been
acknowledged, transform received op against all these
operations and apply
******** otherwise, apply directly
**** concurrency control:
***** recall that, to apply OT to a pair of operations, need to
know which operation happened first
***** for clients, this is simple:
****** for any two local operations, ordering is input order
****** for any two foreign operations, ordering is receipt order
****** for a local operation and a foreign operation,
local happened before foreign iff local has been acknowledged
by server
****** in other words, defer to ordering determined by server
***** server:
****** need to handle case in which two clients each perform an
operation that the other is not aware of
****** order in which they are received from clients determines
order in which they are applied to master state
****** ...
**** optimizing bandwidth
***** operations structured to support composition
*** performance evaluation
**** 
*** future work
**** replication
